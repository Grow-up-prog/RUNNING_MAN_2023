#if CONFIG_FREERTOS_UNICORE
#define ARDUINO_RUNNING_CORE 0
#else
#define ARDUINO_RUNNING_CORE 1
#endif

#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <printf.h>
#include <Wire.h>
RF24 radio(4, 5); // CE, CSN ESP32
int led = 2;
int buzzer = 26;
int dataInt;              //Mendeklarasi varibel dataInt
int buzzerLoud = 25;

const byte address[6] = "00001";

//BLUETOOTH SYSTEM
#include <BluetoothSerial.h>
// Pengaturan Bluetooth
BluetoothSerial SerialBT;
char commandBLU;

float a_md = 0;
float a_d = 0;
float b_md = 0;
float b_d = 0;
float c_md = 0;
float c_d = 0;
int flag = 0;
char cmd ;

//STOPWATCH
//variabel nilai millis
long millisSekarang;
long millisSebelum;
int milidetik, detik, menit, jam;
//CHECKPOINT PELARI
float a = 0;
float b = 0;
float c = 0;
float d = 0;
int CPBuzzer = 0;
int oneSendZero = 0;

// define two tasks for Blink & AnalogRead
void TaskRadio( void *pvParameters );
void TaskBluetooth( void *pvParameters );
//void TaskStopwatch( void *pvParameters );

// the setup function runs once when you press reset or power the board
void setup() {
  pinMode(led, OUTPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(buzzerLoud, OUTPUT);
  // initialize serial communication at 115200 bits per second:
  Serial.begin(115200);
  radio.begin();
  radio.openReadingPipe(0, address);
  radio.setPALevel(RF24_PA_MIN);
  radio.startListening();
  printf_begin();
  radio.printDetails();
  SerialBT.begin("RUNNING UNJ"); // Nama bluetooth
  Serial.print("PENCATAT KECEPATAN ATLET");
  delay(1000);
  // Now set up two tasks to run independently.
  xTaskCreatePinnedToCore(TaskRadio, "TaskRadio ", 1024, NULL, 1,  NULL,  ARDUINO_RUNNING_CORE);
  xTaskCreatePinnedToCore(TaskBluetooth,  "TaskBluetooth", 1024,  NULL,  1 ,  NULL,  ARDUINO_RUNNING_CORE);
  //  xTaskCreatePinnedToCore(TaskStopwatch,  "TaskStopwatch", 1024,  NULL,  1 ,  NULL,  ARDUINO_RUNNING_CORE);
}

void loop()
{
  // Empty. Things are done in Tasks.
}

/*---------------------- Tasks ---------------------*/

void TaskRadio(void *pvParameters)  // This is a task.
{
  (void) pvParameters;
  // initialize digital LED_BUILTIN on pin 13 as an output.

  for (;;) // A Task shall never return or exit.
  {
    if (radio.available()) {
      char text[32] = "";
      radio.read(&text, sizeof(text));
      Serial.println(text);
      String transData = String(text);
      Serial.println(transData);
      if (transData == "pesan" && flag == 1 && a == 0)
      {
        if (milidetik > 0) {
          a_md = float(milidetik) / 10;
        }
        a_d = detik;
        a = a_d + a_md;
        buzzerAktifasi();
        sendingData();
      }
      else if (transData == "pesan2" && flag == 1 && b == 0)
      {
        if (milidetik > 0) {
          b_md = float(milidetik) / 10;
        }
        b_d = detik;
        b = b_d + b_md;
        buzzerAktifasi();
        sendingData();

      } else if (transData == "pesan3" && flag == 1 && c == 0)
      {
        if (milidetik > 0) {
          c_md = float(milidetik) / 10;
        }
        c_d = detik;
        c = c_d + c_md;
        buzzerAktifasi();
        sendingData();
        flag = 2;
      }
      else if (transData == "pesan" || transData == "pesan2" || transData == "pesan3") {
        buzzerAktifasi();
      }
      else {
        Serial.println("Salah Pesan");
      }
    }
  }
}

void TaskBluetooth(void *pvParameters)  // This is a task.
{
  (void) pvParameters;

  for (;;)
  {
    if (SerialBT.available()) {
      cmd = SerialBT.read();
      Serial.println(cmd);
    }
    if (cmd == 'B') {
      flag = 1; //flag run
      cmd = 'Z';
      oneSendZero = 0;
    }
    if (cmd == 'A' || cmd == 'B') {
      milidetik = 0;
      detik = 0;
      menit = 0;
      flag = 0;
      CPBuzzer = 0;
      a = 0;
      b = 0;
      c = 0;
      d = 0;
      a_md = 0;
      a_d = 0;
      b_md = 0;
      b_d = 0;
      c_md = 0;
      c_d = 0;
      if (oneSendZero == 0) {
        sendingData();
        oneSendZero = 1;
      }

    }
    if (flag == 1) {
      millisSekarang = millis();
      if (detik < 1) {
        digitalWrite(buzzer, HIGH);
        digitalWrite(buzzerLoud, HIGH);
      } else if (detik >= 1 && CPBuzzer == 0) {
        digitalWrite(buzzer, LOW);
        digitalWrite(buzzerLoud, LOW);
        CPBuzzer = 1;
      }
      if (millisSekarang - millisSebelum >= 100) {
        milidetik++;
        if (milidetik >= 10) {
          detik++;
          milidetik = 0;
        }
        Serial.print("-");
        Serial.print(detik);
        Serial.print("-");
        Serial.println(milidetik);
        millisSebelum = millisSekarang;
      }
    }
  }
}

void buzzerAktifasi() {
  digitalWrite(buzzer, HIGH);
  digitalWrite(buzzerLoud, HIGH);
  vTaskDelay(1000);
  digitalWrite(buzzer, LOW);
  digitalWrite(buzzerLoud, LOW);
  vTaskDelay(200);
}

void buzzerAktifasiRun() {
  digitalWrite(buzzer, HIGH);
  digitalWrite(buzzerLoud, HIGH);
}

void ledAktifasi() {
  digitalWrite(led, HIGH);
  vTaskDelay(500);
  digitalWrite(led, LOW);
  vTaskDelay(200);
}

void sendingData() {
  SerialBT.print(a);
  SerialBT.print(",");
  SerialBT.print(b);
  SerialBT.print(",");
  SerialBT.print(c);
  SerialBT.print(",");
  d = a + b + c;
  SerialBT.print(d);
  SerialBT.println();
}
